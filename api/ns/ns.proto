syntax = "proto3";

package ns;

import "profiles.proto";

// NetworkServer is the network-server service.
service NetworkServer {
    // CreateServiceProfile creates the given service-profile.
    rpc CreateServiceProfile(CreateServiceProfileRequest) returns (CreateServiceProfileResponse) {}

    // GetServiceProfile returns the service-profile matching the given id.
    rpc GetServiceProfile(GetServiceProfileRequest) returns (GetServiceProfileResponse) {}

    // UpdateServiceProfile updates the given service-profile.
    rpc UpdateServiceProfile(UpdateServiceProfileRequest) returns (UpdateServiceProfileResponse) {}

    // DeleteServiceProfile deletes the service-profile matching the given id.
    rpc DeleteServiceProfile(DeleteServiceProfileRequest) returns (DeleteServiceProfileResponse) {}

    // CreateRoutingProfile creates the given routing-profile.
    rpc CreateRoutingProfile(CreateRoutingProfileRequest) returns (CreateRoutingProfileResponse) {}

    // GetRoutingProfile returns the routing-profile matching the given id.
    rpc GetRoutingProfile(GetRoutingProfileRequest) returns (GetRoutingProfileResponse) {}

    // UpdateRoutingProfile updates the given routing-profile.
    rpc UpdateRoutingProfile(UpdateRoutingProfileRequest) returns (UpdateRoutingProfileResponse) {}

    // DeleteRoutingProfile deletes the routing-profile matching the given id.
    rpc DeleteRoutingProfile(DeleteRoutingProfileRequest) returns (DeleteRoutingProfileResponse) {}

    // CreateDeviceProfile creates the given device-profile.
    rpc CreateDeviceProfile(CreateDeviceProfileRequest) returns (CreateDeviceProfileResponse) {}

    // GetDeviceProfile returns the device-profile matching the given id.
    rpc GetDeviceProfile(GetDeviceProfileRequest) returns (GetDeviceProfileResponse) {}

    // UpdateDeviceProfile updates the given device-profile.
    rpc UpdateDeviceProfile(UpdateDeviceProfileRequest) returns (UpdateDeviceProfileResponse) {}

    // DeleteDeviceProfile deletes the device-profile matching the given id.
    rpc DeleteDeviceProfile(DeleteDeviceProfileRequest) returns (DeleteDeviceProfileResponse) {}

    // CreateDevice creates the given device.
    rpc CreateDevice(CreateDeviceRequest) returns (CreateDeviceResponse) {}

    // GetDevice returns the device matching the given DevEUI.
    rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse) {}

    // UpdateDevice updates the given device.
    rpc UpdateDevice(UpdateDeviceRequest) returns (UpdateDeviceResponse) {}

    // DeleteDevice deletes the device matching the given DevEUI.
    rpc DeleteDevice(DeleteDeviceRequest) returns (DeleteDeviceResponse) {}

    // ActivateDevice activates a device (ABP).
    rpc ActivateDevice(ActivateDeviceRequest) returns (ActivateDeviceResponse) {}

    // DeactivateDevice de-activates a device.
    rpc DeactivateDevice(DeactivateDeviceRequest) returns (DeactivateDeviceResponse) {}

    // GetDeviceActivation returns the device activation details.
    rpc GetDeviceActivation(GetDeviceActivationRequest) returns (GetDeviceActivationResponse) {}

    // CreateDeviceQueueItem creates the given device-queue item.
    rpc CreateDeviceQueueItem(CreateDeviceQueueItemRequest) returns (CreateDeviceQueueItemResponse) {}

    // FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
    rpc FlushDeviceQueueForDevEUI(FlushDeviceQueueForDevEUIRequest) returns (FlushDeviceQueueForDevEUIResponse) {}

    // GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
    rpc GetDeviceQueueItemsForDevEUI(GetDeviceQueueItemsForDevEUIRequest) returns (GetDeviceQueueItemsForDevEUIResponse) {}

    // GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
    // This also takes device-queue items for the given DevEUI into consideration.
    rpc GetNextDownlinkFCntForDevEUI(GetNextDownlinkFCntForDevEUIRequest) returns (GetNextDownlinkFCntForDevEUIResponse) {}

    // GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
    rpc GetRandomDevAddr(GetRandomDevAddrRequest) returns (GetRandomDevAddrResponse) {}

    // CreateMACCommandQueueItem adds the downlink mac-command to the queue.
    rpc CreateMACCommandQueueItem(CreateMACCommandQueueItemRequest) returns (CreateMACCommandQueueItemResponse) {}

	// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
	rpc SendProprietaryPayload(SendProprietaryPayloadRequest) returns (SendProprietaryPayloadResponse) {}

    // CreateGateway creates the given gateway.
    rpc CreateGateway(CreateGatewayRequest) returns (CreateGatewayResponse) {}

    // GetGateway returns data for a particular gateway.
    rpc GetGateway(GetGatewayRequest) returns (GetGatewayResponse) {}

    // UpdateGateway updates an existing gateway.
    rpc UpdateGateway(UpdateGatewayRequest) returns (UpdateGatewayResponse) {}

    // ListGateways returns the existing gateways.
    rpc ListGateways(ListGatewayRequest) returns (ListGatewayResponse) {}

    // DeleteGateway deletes a gateway.
    rpc DeleteGateway(DeleteGatewayRequest) returns (DeleteGatewayResponse) {}

    // CreateGatewayProfile creates the given gateway-profile.
    rpc CreateGatewayProfile(CreateGatewayProfileRequest) returns (CreateGatewayProfileResponse) {}

    // GetGatewayProfile returns the gateway-profile given an id.
    rpc GetGatewayProfile(GetGatewayProfileRequest) returns (GetGatewayProfileResponse) {}

    // UpdateGatewayProfile updates the given gateway-profile.
    rpc UpdateGatewayProfile(UpdateGatewayProfileRequest) returns (UpdateGatewayProfileResponse) {}

    // DeleteGatewayProfile deletes the gateway-profile matching a given id.
    rpc DeleteGatewayProfile(DeleteGatewayProfileRequest) returns (DeleteGatewayProfileResponse) {}

    // GetGatewayStats returns stats of an existing gateway.
    rpc GetGatewayStats(GetGatewayStatsRequest) returns (GetGatewayStatsResponse) {}

    // StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
    rpc StreamFrameLogsForGateway(StreamFrameLogsForGatewayRequest) returns (stream StreamFrameLogsForGatewayResponse) {}

    // StreamFrameLogsForDevice returns a stream of frames seen by the given device.
    rpc StreamFrameLogsForDevice(StreamFrameLogsForDeviceRequest) returns (stream StreamFrameLogsForDeviceResponse) {}

    // GetVersion returns the LoRa Server version.
    rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {}

    // MigrateNodeToDeviceSession. This method is for internal us only.
    rpc MigrateNodeToDeviceSession(MigrateNodeToDeviceSessionRequest) returns (MigrateNodeToDeviceSessionResponse) {}

    // MigrateChannelConfigurationToGatewayProfile. This method is for internal use only.
    rpc MigrateChannelConfigurationToGatewayProfile(MigrateChannelConfigurationToGatewayProfileRequest) returns (MigrateChannelConfigurationToGatewayProfileResponse) {}
}

enum RXWindow {
    // Receive window 1
    RX1 = 0;

    // Receive window 2
    RX2 = 1;
}

enum Modulation {
    // LoRa
    LORA = 0;

    // FSK
    FSK = 1;
}

enum Region {
    // EU868
    EU868 = 0;

    // US915
    US915 = 2;

    // CN779
    CN779 = 3;

    // EU433
    EU433 = 4;

    // AU915
    AU915 = 5;

    // CN470
    CN470 = 6;

    // AS923
    AS923 = 7;

    // KR920
    KR920 = 8;

    // IN865
    IN865 = 9;

    // RU864
    RU864 = 10;
}


message CreateServiceProfileRequest {
    ServiceProfile serviceProfile = 1;
}

message CreateServiceProfileResponse {
    string serviceProfileID = 1;
}

message GetServiceProfileRequest {
    string serviceProfileID = 1;
}

message GetServiceProfileResponse {
    ServiceProfile serviceProfile = 1;
    string createdAt = 2;
    string updatedAt = 3;
}

message UpdateServiceProfileRequest {
    ServiceProfile serviceProfile = 1;
}

message UpdateServiceProfileResponse {}

message DeleteServiceProfileRequest {
    string serviceProfileID = 1;
}

message DeleteServiceProfileResponse {}

message RoutingProfile {
	string routingProfileID = 1;
    string asID = 2;
}

message CreateRoutingProfileRequest {
    RoutingProfile routingProfile = 1;

    // ca certificate for connecting to lora-app-server
    string caCert = 2;

    // tls certificate for connecting to lora-app-server
    string tlsCert = 3;

    // tls key for connecting to lora-app-server
    string tlsKey = 4;
}

message CreateRoutingProfileResponse {
    string routingProfileID = 1;
}

message GetRoutingProfileRequest {
    string routingProfileID = 1;
}

message GetRoutingProfileResponse {
    RoutingProfile routingProfile = 1;
    string createdAt = 2;
    string updatedAt = 3;

    // ca certificate for connecting to lora-app-server
    string caCert = 4;

    // tls certificate for connecting to lora-app-server
    string tlsCert = 5;
}

message UpdateRoutingProfileRequest {
    RoutingProfile routingProfile = 1;

    // ca certificate for connecting to lora-app-server
    string caCert = 2;

    // tls certificate for connecting to lora-app-server
    string tlsCert = 3;

    // tls key for connecting to lora-app-server
    string tlsKey = 4;
}

message UpdateRoutingProfileResponse {}

message DeleteRoutingProfileRequest {
    string routingProfileID = 1;
}

message DeleteRoutingProfileResponse {}

message CreateDeviceProfileRequest {
    DeviceProfile deviceProfile = 1;
}

message CreateDeviceProfileResponse {
    string deviceProfileID = 1;
}

message GetDeviceProfileRequest {
    string deviceProfileID = 1;
}

message GetDeviceProfileResponse {
    DeviceProfile deviceProfile = 1;
    string createdAt = 2;
    string updatedAt = 3;
}

message UpdateDeviceProfileRequest {
    DeviceProfile deviceProfile = 1;
}

message UpdateDeviceProfileResponse {}

message DeleteDeviceProfileRequest {
    string deviceProfileID = 1;
}

message DeleteDeviceProfileResponse {}

message Device {
    bytes devEUI = 1;
    string deviceProfileID = 2;
    string serviceProfileID = 3;
    string routingProfileID = 4;
}

message CreateDeviceRequest {
    Device device = 1;
}

message CreateDeviceResponse {}

message GetDeviceRequest {
    bytes devEUI = 1;
}

message GetDeviceResponse {
    Device device = 1;
    string createdAt = 2;
    string updatedAt = 3;
}

message UpdateDeviceRequest {
    Device device = 1;
}

message UpdateDeviceResponse {}

message DeleteDeviceRequest {
    bytes devEUI = 1;
}

message DeleteDeviceResponse {}

message ActivateDeviceRequest {
    // Device EUI (8 bytes).
    bytes devEUI = 1;

    // The address of the device (4 bytes).
    bytes devAddr = 2;

    // The network-session key (16 bytes).
    bytes nwkSKey = 3;

    // The next expected uplink frame-counter.
    uint32 fCntUp = 4;

    // The frame-counter used for the next downlink frame.
    uint32 fCntDown = 5;

    // Skip frame-counter checks (this is insecure, but could be helpful for debugging).
    bool skipFCntCheck = 6;
}

message ActivateDeviceResponse {}

message DeactivateDeviceRequest {
    // Device EUI (8 bytes).
    bytes devEUI = 1;
}

message DeactivateDeviceResponse {}

message GetDeviceActivationRequest {
    // Device EUI (8 bytes).
    bytes devEUI = 1;
}

message GetDeviceActivationResponse {
    // The address of the device (4 bytes).
    bytes devAddr = 1;

    // The network-session key (16 bytes).
    bytes nwkSKey = 2;

    // The next expected uplink frame-counter.
    uint32 fCntUp = 3;

    // The frame-counter used for the next downlink frame.
    uint32 fCntDown = 4;

    // Skip frame-counter checks (this is insecure, but could be helpful for debugging).
    bool skipFCntCheck = 5;
}


message GetRandomDevAddrRequest {}

message GetRandomDevAddrResponse {
    bytes devAddr = 1;
}

message CreateMACCommandQueueItemRequest {
    // DevEUI of the node.
    bytes devEUI = 1;

    // Command identifier (specified by the LoRaWAN specs).
    uint32 cid = 4;

    // MAC-command(s). In case multiple payloads are defined, then they
    // are always sent within a single frame.
    repeated bytes commands = 5;
}

message CreateMACCommandQueueItemResponse {}

message SendProprietaryPayloadRequest {
	// MACPayload of the proprietary LoRaWAN frame.
	bytes macPayload = 1;

	// MIC of the proprietary LoRaWAN frame (must be 4 bytes).
	bytes mic = 2;

	// Gateway MAC address(es) to use for transmitting the LoRaWAN frame.
	repeated bytes gatewayMACs = 3;

	// Set to true for sending as a gateway, or false for sending as a node.
	// In the latter case the frame will be received by other gateways.
	bool iPol = 4;

	// Frequency (Hz) to use for the transmission.
	uint32 frequency = 5;

	// Data-rate to use for the transmission.
	uint32 dr = 6;
}

message SendProprietaryPayloadResponse {}

message CreateGatewayRequest {
    // MAC address of the gateway.
    bytes mac = 1;

    // Name of the gateway.
    string name = 2;

    // Description for the gateway.
    string description = 3;

    // Latitude of the gateway.
    double latitude = 4;

    // Longitude of the gateway.
    double longitude = 5;

    // Altitude of the gateway.
    double altitude = 6;

    // ID of the gateway-profile (optional).
    string gatewayProfileID = 8;
}

message CreateGatewayResponse {}

message GetGatewayRequest {
    // MAC address of the gateway.
    bytes mac = 1;
}

message GetGatewayResponse {
    // MAC address of the gateway.
    bytes mac = 1;

    // Name of the gateway.
    string name = 2;

    // Description for the gateway.
    string description = 3;

    // Latitude of the gateway.
    double latitude = 4;

    // Longitude of the gateway.
    double longitude = 5;

    // Altitude of the gateway.
    double altitude = 6;

    // The timestamp when the gateway was created.
    string createdAt = 7;

    // The timestamp when the gateway was last updated.
    string updatedAt = 8;

    // The timestamp when the gateway was first seen.
    string firstSeenAt = 9;

    // The timestamp when the gateway was last seen.
    string lastSeenAt = 10;

    // ID of the gateway-profile (optional).
    string gatewayProfileID = 12;
}

message UpdateGatewayRequest {
    // MAC address of the gateway.
    bytes mac = 1;

    // Name of the gateway.
    string name = 2;

    // Description for the gateway.
    string description = 3;

    // Latitude of the gateway.
    double latitude = 4;

    // Longitude of the gateway.
    double longitude = 5;

    // Altitude of the gateway.
    double altitude = 6;

    // ID of the gateway-profile.
    string gatewayProfileID = 8;
}

message UpdateGatewayResponse {}

message ListGatewayRequest {
    // Max number of gateways to return in the result-set.
    int32 limit = 1;

    // Offset in the result-set (for pagination).
    int32 offset = 2;
}

message ListGatewayResponse {
    // Total number of gateways.
    int32 totalCount = 1;

    // Result-set.
    repeated GetGatewayResponse result = 2;
}

message DeleteGatewayRequest {
    // MAC address of the gateway.
    bytes mac = 1;
}

message DeleteGatewayResponse {}

enum AggregationInterval {
    SECOND = 0;
    MINUTE = 1;
    HOUR = 2;
    DAY = 3;
    WEEK = 4;
    MONTH = 5;
    QUARTER = 6;
    YEAR = 7;
}

message GatewayStats {
    // Timestamp of the (aggregated) measurement.
    string timestamp = 1;

    // Packets received by the gateway.
    int32 rxPacketsReceived = 2;

    // Packets received by the gateway that passed the CRC check.
    int32 rxPacketsReceivedOK = 3;

    // Packets received by the gateway for transmission.
    int32 txPacketsReceived = 4;

    // Packets transmitted by the gateway.
    int32 txPacketsEmitted = 5;
}

message GetGatewayStatsRequest {
    // MAC address of the gateway.
    bytes mac = 1;

    // Aggregation interval.
    AggregationInterval interval = 2;

    // Timestamp to start from.
    string startTimestamp = 3;

    // Timestamp until to get from.
    string endTimestamp = 4;
}

message GetGatewayStatsResponse {
    repeated GatewayStats result = 1;
}

message DeviceQueueItem {
    // DevEUI of the device.
    bytes devEUI = 1;

    // The encrypted FRMPayload bytes.
    bytes frmPayload = 2;

    // The FCnt of the payload.
    uint32 fCnt = 3;

    // The FPort of the payload.
    uint32 fPort = 4;

    // When set to true, LoRa Server will wait for the device to ack the
    // received frame.
    bool confirmed = 5;
}

message CreateDeviceQueueItemRequest {
    DeviceQueueItem item = 1;
}

message CreateDeviceQueueItemResponse {}

message FlushDeviceQueueForDevEUIRequest {
    // DevEUI of the device.
    bytes devEUI = 1;
}

message FlushDeviceQueueForDevEUIResponse {}

message GetDeviceQueueItemsForDevEUIRequest {
    // DevEUI of the device.
    bytes devEUI = 1;
}

message GetDeviceQueueItemsForDevEUIResponse {
    repeated DeviceQueueItem items = 1;
}

message GetNextDownlinkFCntForDevEUIRequest {
    // DevEUI of the device.
    bytes devEUI = 1;
}

message GetNextDownlinkFCntForDevEUIResponse {
    // The frame-counter to use.
    uint32 fCnt = 1;
}

message StreamFrameLogsForGatewayRequest {
    // MAC address of the gateway.
    bytes mac = 1;
}

message StreamFrameLogsForGatewayResponse {
    // Contains zero or one uplink frame.
    repeated UplinkFrameLog uplinkFrames = 1;

    // Contains zero or one downlink frame.
    repeated DownlinkFrameLog downlinkFrames = 2;
}

message StreamFrameLogsForDeviceRequest {
    // DevEUI of the device.
    bytes devEUI = 1;
}

message StreamFrameLogsForDeviceResponse {
    // Contains zero or one uplink frame.
    repeated UplinkFrameLog uplinkFrames = 1;

    // Contains zero or one downlink frame.
    repeated DownlinkFrameLog downlinkFrames = 2;
}

message DataRate {
    // The used modulation (LORA or FSK).
    string modulation = 1;

    // Bandwidth (in kHz).
    uint32 bandwidth = 2;

    // Used spread-factor.
    uint32 spreadFactor = 3;

    // Bitrate (used for FSK modulation).
    uint32 bitrate = 4;
}


message UplinkTXInfo {
    // TX frequency (in Hz).
    uint32 frequency = 1;

    // Data-rate.
    DataRate dataRate = 2;

    // Code rate.
    string codeRate = 3;
}

message UplinkRXInfo {
    // Gateway MAC.
    bytes mac = 1;

    // Time when the frame was received (if available).
    string time = 2;

    // Time when the frame was received as time since GPS epoch (if available).
    string timeSinceGPSEpoch = 3;

    // Gateway internal timestamp.
    uint32 timestamp = 4;

    // RSSI.
    int32 rssi = 5;

    // LoRa SNR.
    float loRaSNR = 6;

    // The board identifier that received the uplink frame.
    uint32 board = 7;

    // THe antenna identifier that received the uplink frame.
    uint32 antenna = 8;
}

message UplinkFrameLog {
    // TX information of the uplink.
    UplinkTXInfo txInfo = 1;

    // RX information of the uplink.
    repeated UplinkRXInfo rxInfo = 2;

    // LoRaWAN PHYPayload.
    bytes phyPayload = 3;
}

message DownlinkTXInfo {
    // Gateway MAC.
    bytes mac = 1;

    // Frame must be sent immediately.
    bool immediately = 2;

    // Transmit frame at the given time since GPS epoch.
    string timeSinceGPSEpoch = 3;

    // Transmit the frame at the given gateway internal timestamp.
    uint32 timestamp = 4;

    // TX frequency (in Hz).
    uint32 frequency = 5;

    // TX power (in dBm).
    int32 power = 6;

    // Data-rate.
    DataRate dataRate = 7;

    // Code rate.
    string codeRate = 8;

    // Lora modulation polarization inversion.
    bool iPol = 9;

    // The board identifier that received the uplink frame.
    uint32 board = 10;

    // THe antenna identifier that received the uplink frame.
    uint32 antenna = 11;
}

message DownlinkFrameLog {
    // TX information of the downlink.
    DownlinkTXInfo txInfo = 1;

    // LoRaWAN PHYPayload.
    bytes phyPayload = 2;
}

message GetVersionRequest {}

message GetVersionResponse {
    // LoRa Server version.
    string version = 1;

    // Region configured for this network-server.
    Region region = 2;
}
message GatewayProfile {
    // ID of the gateway-profile.
    string gatewayProfileID = 1;

    // Default channels (channels specified by the LoRaWAN Regional Parameters
    // specification) enabled for this configuration.
    repeated uint32 channels = 2;

    // Extra channels added to the channel-configuration (in case the LoRaWAN
    // region supports adding custom channels).
    repeated GatewayProfileExtraChannel extraChannels = 3;
}

message GatewayProfileExtraChannel {
    // Modulation.
    Modulation modulation = 1;

    // Frequency.
    uint32 frequency = 2;

    // Bandwidth.
    uint32 bandwidth = 3;

    // Bitrate (in case of FSK modulation).
    uint32 bitrate = 4;

    // Spreading factors (in case of LoRa modulation).
    repeated uint32 spreadingFactors = 5;
}

message CreateGatewayProfileRequest {
    GatewayProfile gatewayProfile = 1;
}

message CreateGatewayProfileResponse {
    // ID of the create configuration object.
    string gatewayProfileID = 1;
}

message GetGatewayProfileRequest {
    // ID of the gateway-profile.
    string gatewayProfileID = 1;
}

message GetGatewayProfileResponse {
    GatewayProfile gatewayProfile = 1;
    string createdAt = 2;
    string updatedAt = 3;
}

message UpdateGatewayProfileRequest {
    GatewayProfile gatewayProfile = 1;
}

message UpdateGatewayProfileResponse {}

message DeleteGatewayProfileRequest {
    // ID of the gateway-profile.
    string gatewayProfileID = 1;
}

message DeleteGatewayProfileResponse {}

message MigrateNodeToDeviceSessionRequest {
    bytes devEUI = 1;

    bytes joinEUI = 2;

    repeated bytes devNonces = 3;
}

message MigrateNodeToDeviceSessionResponse {}

message MigrateChannelConfigurationToGatewayProfileRequest {}

message MigrateChannelConfigurationToGatewayProfileResponse {
    repeated GatewayProfileMigration profiles = 1;
}

message GatewayProfileMigration {
    // ID of the gateway-profile.
    string id = 1;

    // Name of the gateway-profile.
    string name = 2;
}
